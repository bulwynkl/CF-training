AWSTemplateFormatVersion: 2010-09-09
Mappings:
  AWSRegionArch2AMI:
    me-south-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-0744743d80915b497
    ap-northeast-1:
      HVMG2: ami-09d0e0e099ecabba2
      HVM64: ami-0b2c2a754d5b4da22
    eu-west-2:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-0765d48d7e15beb93
    us-east-2:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-027cab9a7bf0155df
    eu-central-1:
      HVMG2: ami-0aa1822e3eb913a11
      HVM64: ami-0474863011a7d1541
    sa-east-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-0a52e8a6018e92bb0
    ap-east-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-f85b1989
    ap-northeast-3:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-01344f6f63a4decc1
    eu-north-1:
      HVMG2: ami-32d55b4c
      HVM64: ami-0de4b8910494dba0f
    us-west-2:
      HVMG2: ami-0fe84a5b4563d8f27
      HVM64: ami-01fee56b22f308154
    us-east-1:
      HVMG2: ami-0aeb704d503081ea6
      HVM64: ami-032930428bf1abbff
    eu-south-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-08427144fe9ebdef6
    eu-west-1:
      HVMG2: ami-0d5299b1c6112c3c7
      HVM64: ami-015232c01a82b847b
    ap-northeast-2:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-0493ab99920f410fc
    us-west-1:
      HVMG2: ami-0a7fc72dc0e51aa77
      HVM64: ami-088c153f74339f34c
    ap-southeast-2:
      HVMG2: ami-0c0ab057a101d8ff2
      HVM64: ami-0ae99b503e8694028
    ap-south-1:
      HVMG2: ami-0244c1d42815af84a
      HVM64: ami-03cfb5e1fb4fac428
    ca-central-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-0803e21a2ec22f953
    af-south-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-064cc455f8a1ef504
    cn-north-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-07a3f215cc90c889c
    cn-northwest-1:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-0a3b3b10f714a0ff4
    ap-southeast-1:
      HVMG2: ami-0e46ce0d6a87dc979
      HVM64: ami-0ba35dc9caf73d1c7
    eu-west-3:
      HVMG2: NOT_SUPPORTED
      HVM64: ami-0caf07637eda19d9c
  AWSInstanceType2NATArch:
    c4.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    g2.8xlarge:
      Arch: NATHVMG2
    m4.4xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    m2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    t1.micro:
      Arch: NATHVM64
    c1.medium:
      Arch: NATHVM64
  AWSInstanceType2Arch:
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    g2.8xlarge:
      Arch: HVMG2
    m4.4xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    m2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    t1.micro:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
Resources:
  LaunchConfig:
    Metadata:
      AWS::CloudFormation::Init:
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              group: root
              mode: '000400'
              owner: root
              content:
                Fn::Join:
                - ''
                - - |
                    [main]
                  - stack=
                  - Ref: AWS::StackId
                  - |2+

                  - region=
                  - Ref: AWS::Region
                  - |2+

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              group: root
              mode: '000400'
              owner: root
              content:
                Fn::Join:
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - Ref: AWS::Region
                  - |2+

          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                ensureRunning: 'true'
        install_wordpress:
          commands:
            01_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
          sources:
            /var/www/html: http://wordpress.org/latest.tar.gz
          packages:
            yum:
              httpd24: []
              mysql57: []
              php73-mysqlnd: []
              php73: []
          files:
            /tmp/create-wp-config:
              group: root
              mode: '000500'
              owner: root
              content:
                Fn::Join:
                - ''
                - - |
                    #!/bin/bash
                  - |
                    cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - Ref: DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - Ref: DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - Ref: DBPassword
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'localhost'/'
                  - Fn::GetAtt:
                    - DBInstance
                    - Endpoint.Address
                  - |
                    '/g" wp-config.php
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
        configSets:
          wordpress_install:
          - install_cfn
          - install_wordpress
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      KeyName:
        Ref: KeyName
      InstanceType:
        Ref: InstanceType
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource LaunchConfig '
            - '         --configsets wordpress_install '
            - '         --region '
            - Ref: AWS::Region
            - |2+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource WebServerGroup '
            - '         --region '
            - Ref: AWS::Region
            - |2+

      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - FromPort: '3306'
        IpProtocol: tcp
        ToPort: '3306'
        SourceSecurityGroupId:
          Ref: WebServerSecurityGroup
      GroupDescription: Open database for access
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /wordpress/wp-admin/install.php
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VpcId
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      Port: 80
      TargetGroupAttributes:
      - Value: 'true'
        Key: stickiness.enabled
      - Value: lb_cookie
        Key: stickiness.type
      - Value: '30'
        Key: stickiness.lb_cookie.duration_seconds
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
        SourceSecurityGroupId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - ApplicationLoadBalancer
            - SecurityGroups
      - FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer
        + SSH access
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      MasterUserPassword:
        Ref: DBPassword
      MasterUsername:
        Ref: DBUser
      Engine: MySQL
      DBInstanceClass:
        Ref: DBClass
      VPCSecurityGroups:
      - Fn::GetAtt:
        - DBEC2SecurityGroup
        - GroupId
      MultiAZ:
        Ref: MultiAZDatabase
      AllocatedStorage:
        Ref: DBAllocatedStorage
      DBName:
        Ref: DBName
  WebServerGroup:
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      VPCZoneIdentifier:
        Ref: Subnets
      TargetGroupARNs:
      - Ref: ALBTargetGroup
      MaxSize: '5'
      DesiredCapacity:
        Ref: WebServerCapacity
      MinSize: '1'
      LaunchConfigurationName:
        Ref: LaunchConfig
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        Ref: Subnets
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      DefaultActions:
      - TargetGroupArn:
          Ref: ALBTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '80'
Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
        - /wordpress
    Description: WordPress Website
Parameters:
  DBUser:
    MaxLength: '16'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    MinLength: '1'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    NoEcho: 'true'
    Type: String
    Description: The WordPress database admin account username
  SSHLocation:
    MaxLength: '18'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    MinLength: '9'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Type: String
    Description: The IP address range that can be used to SSH to the EC2 instances
  VpcId:
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  DBClass:
    ConstraintDescription: must select a valid database instance type.
    Default: db.t2.small
    Type: String
    AllowedValues:
    - db.t1.micro
    - db.m1.small
    - db.m1.medium
    - db.m1.large
    - db.m1.xlarge
    - db.m2.xlarge
    - db.m2.2xlarge
    - db.m2.4xlarge
    - db.m3.medium
    - db.m3.large
    - db.m3.xlarge
    - db.m3.2xlarge
    - db.m4.large
    - db.m4.xlarge
    - db.m4.2xlarge
    - db.m4.4xlarge
    - db.m4.10xlarge
    - db.r3.large
    - db.r3.xlarge
    - db.r3.2xlarge
    - db.r3.4xlarge
    - db.r3.8xlarge
    - db.m2.xlarge
    - db.m2.2xlarge
    - db.m2.4xlarge
    - db.cr1.8xlarge
    - db.t2.micro
    - db.t2.small
    - db.t2.medium
    - db.t2.large
    Description: Database instance class
  Subnets:
    ConstraintDescription: must be a list of at least two existing subnets associated
      with at least two different availability zones. They should be residing in the
      selected Virtual Private Cloud.
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  DBAllocatedStorage:
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
    Default: '5'
    Type: Number
    Description: The size of the database (Gb)
    MinValue: '5'
  InstanceType:
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Type: String
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    Description: WebServer EC2 instance type
  MultiAZDatabase:
    ConstraintDescription: must be either true or false.
    Default: 'false'
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
  WebServerCapacity:
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
    Default: '1'
    Type: Number
    Description: The initial number of WebServer instances
    MinValue: '1'
  DBPassword:
    MaxLength: '41'
    ConstraintDescription: must contain only alphanumeric characters.
    MinLength: '8'
    AllowedPattern: '[a-zA-Z0-9]*'
    NoEcho: 'true'
    Type: String
    Description: The WordPress database admin account password
  DBName:
    MaxLength: '64'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: wordpressdb
    MinLength: '1'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Type: String
    Description: The WordPress database name
Description: 'AWS CloudFormation Sample Template WordPress_Multi_AZ: WordPress is
  web software you can use to create a beautiful website or blog. This template installs
  a highly-available, scalable WordPress deployment using a multi-az Amazon RDS database
  instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts
  to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an
  Application Load Balancer and an Amazon RDS database instance. You will be billed
  for the AWS resources used if you create a stack from this template.'
